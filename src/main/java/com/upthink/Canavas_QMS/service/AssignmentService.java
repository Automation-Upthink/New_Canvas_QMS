package com.upthink.Canavas_QMS.service;import com.upthink.Canavas_QMS.dto.request.FetchDataForClientRequest;import com.upthink.Canavas_QMS.dto.response.FetchDataForClientResponse;import com.upthink.Canavas_QMS.dto.response.LambdaDataResponse;import com.upthink.Canavas_QMS.dto.response.LamdaDataResponse;import com.upthink.Canavas_QMS.model.Assignment;import com.upthink.Canavas_QMS.repository.AssignmentRepository;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.sql.Timestamp;import java.time.LocalDateTime;import java.util.ArrayList;import java.util.List;import java.util.Optional;@Servicepublic class AssignmentService {    private final AssignmentRepository assignmentRepository;    public AssignmentService(AssignmentRepository assignmentRepository) {        this.assignmentRepository = assignmentRepository;    }    public List<Assignment> getAllAssignments() {        return assignmentRepository.findAllAssignments();    }    public Optional<Assignment> getAssignmentById(int id) {        return assignmentRepository.findAssignmentById(id);    }    @Transactional    public void saveAssignment(Assignment assignment) {        assignmentRepository.insertAssignment(                assignment.getCourseId(),                assignment.getCreatedAt(),                assignment.getUpdatedAt(),                assignment.getDeletedAt(),                assignment.getDueDate(),                assignment.getLockDate(),                assignment.getGradeType(),                assignment.getPointsPossible(),                assignment.getRubricBasedGrading(),                assignment.getRubric(),                assignment.getSubmissionStarted(),                assignment.getAssignmentId()        );    }    @Transactional    public void deleteAssignment(int id) {        assignmentRepository.deleteAssignmentById(id);    }    public List<FetchDataForClientResponse> fetchDataForClientService(Integer clientId) {        List<Object[]> results = assignmentRepository.findAssignmentsForClient(clientId);        List<FetchDataForClientResponse> assignmentDTOs = new ArrayList<>();        for (Object[] row : results) {            Integer clientIdVal = (Integer) row[0];            Integer courseIdVal = (Integer) row[1];            Integer assignmentIdVal = (Integer) row[2];            LocalDateTime dueDateVal = row[3] != null ? ((Timestamp) row[3]).toLocalDateTime() : null;            LocalDateTime lockDateVal = row[4] != null ? ((Timestamp) row[4]).toLocalDateTime() : null;            FetchDataForClientResponse assignmentDTO = new FetchDataForClientResponse(clientIdVal, courseIdVal,                    assignmentIdVal, dueDateVal, lockDateVal);            assignmentDTOs.add(assignmentDTO);        }        return assignmentDTOs;    }}