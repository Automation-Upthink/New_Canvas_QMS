package com.upthink.Canavas_QMS.repository;import com.upthink.Canavas_QMS.model.Assignment;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.Modifying;import org.springframework.data.jpa.repository.Query;import org.springframework.data.repository.query.Param;import org.springframework.stereotype.Repository;import org.springframework.transaction.annotation.Transactional;import java.math.BigInteger;import java.sql.Timestamp;import java.util.List;import java.util.Optional;@Repositorypublic interface AssignmentRepository extends JpaRepository<Assignment, Integer> {    // Custom SQL Queries (excluding soft-deleted records)    @Query("SELECT a FROM Assignment a WHERE a.deletedAt IS NULL")    List<Assignment> findAllAssignments();    @Query("SELECT a FROM Assignment a WHERE a.id = :id AND a.deletedAt IS NULL")    Optional<Assignment> findAssignmentById(Integer id);    @Modifying    @Transactional    @Query("UPDATE Assignment a SET a.deletedAt = :deletedAt WHERE a.id = :id")    void softDeleteAssignmentById(Integer id, Timestamp deletedAt);    @Modifying    @Transactional    @Query("UPDATE Assignment a SET a.courseId = :courseId, a.dueDate = :dueDate, a.lockDate = :lockDate, a.gradeType = :gradeType, a.pointsPossible = :pointsPossible, a.rubricBasedGrading = :rubricBasedGrading, a.rubric = :rubric, a.submissionStarted = :submissionStarted WHERE a.id = :id")    void updateAssignment(@Param("id") int id, @Param("courseId") String courseId, @Param("dueDate") Long dueDate, @Param("lockDate") Long lockDate, @Param("gradeType") String gradeType, @Param("pointsPossible") BigInteger pointsPossible, @Param("rubricBasedGrading") Boolean rubricBasedGrading, @Param("rubric") String rubric, @Param("submissionStarted") Boolean submissionStarted);    @Query(value = """        SELECT c.clientId AS client,                a.courseId AS course,                a.assignmentId AS assignment,                a.dueDate,                a.lockDate        FROM Assignment a        JOIN Course c ON a.courseId = c.courseId        WHERE c.clientId = :clientId          AND c.deletedAt IS NULL          AND a.deletedAt IS NULL    """, nativeQuery = true)    List<Object[]> findAssignmentsForClient(@Param("clientId") Integer clientId);}