package com.upthink.Canavas_QMS.security.service;import com.fasterxml.jackson.databind.ObjectMapper;import com.google.gson.Gson;import com.upthink.Canavas_QMS.dto.request.AuthenticatedRequest;import com.upthink.Canavas_QMS.dto.request.TokenValidation;import jakarta.servlet.http.HttpServletRequest;import java.util.stream.Collectors;import org.springframework.core.MethodParameter;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.web.bind.support.WebDataBinderFactory;import org.springframework.web.context.request.NativeWebRequest;import org.springframework.web.method.support.HandlerMethodArgumentResolver;import org.springframework.web.method.support.ModelAndViewContainer;public class TokenValidationArgumentResolver implements HandlerMethodArgumentResolver {    private final Gson gson;    public boolean supportsParameter(MethodParameter parameter) {        return AuthenticatedRequest.class.isAssignableFrom(parameter.getParameterType());    }    public TokenValidationArgumentResolver(Gson gson) {        this.gson = gson;    }    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {        HttpServletRequest nativeRequest = (HttpServletRequest)webRequest.getNativeRequest(HttpServletRequest.class);        String jsonBody = (String)nativeRequest.getReader().lines().collect(Collectors.joining());        new ObjectMapper();        AuthenticatedRequest request = (AuthenticatedRequest)this.gson.fromJson(jsonBody, parameter.getParameterType());        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        if (authentication != null && authentication.getCredentials() instanceof TokenValidation) {            TokenValidation tokenValidation = (TokenValidation)authentication.getCredentials();            request.setId(tokenValidation);        } else {            System.out.println("Token validation not found in the authentication credentials");        }        return request;    }}