package com.upthink.Canavas_QMS.security.service;import com.upthink.Canavas_QMS.dto.request.TokenValidation;import java.util.Collections;import java.util.List;import java.util.Map;import com.upthink.Canavas_QMS.model.Person;import com.upthink.Canavas_QMS.service.PersonService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class AuthService {    private final PersonService personService;    private final JwtService jwtService;    @Autowired    public AuthService(PersonService personService, JwtService jwtService) {        this.personService = personService;        this.jwtService = jwtService;    }    public TokenValidation validateTokenAndGetTokenValidation(String token) throws Exception {        String cognitoSub = this.jwtService.extractCognitoSub(token);        if (cognitoSub != null && this.jwtService.isTokenValid(token)) {            Person person = this.personService.findByCognitoId(cognitoSub);            if (person != null) {                List<String> roles = this.jwtService.extractCognitoGroups(token);                TokenValidation tokenValidation = new TokenValidation(true, cognitoSub, roles, person.getName(), person.getEmail(), (String)null, person.getId(), (String)null, (Map)null, token);                return tokenValidation;            } else {                throw new RuntimeException("User not found in the local database.");            }        } else {            throw new RuntimeException("Invalid JWT token.");        }    }    public TokenValidation validateTokenAndGetTokenValidationFromId(String token) throws Exception {        String cognitoSub = this.jwtService.extractCognitoSub(token);        if (cognitoSub != null && this.jwtService.isTokenValid(token)) {            this.jwtService.extractCognitoGroups(token);            String email = this.jwtService.extractCognitoEmail(token);            TokenValidation tokenValidation = new TokenValidation(true, cognitoSub, Collections.singletonList("USER"), email, email, (String)null, cognitoSub, (String)null, (Map)null, token);            return tokenValidation;        } else {            throw new RuntimeException("Invalid JWT token.");        }    }    public void registerNewUser(String cognitoUsername, String cognitoSub, String email, List<String> userGroups) {        this.savePersonToDatabase(cognitoSub, email, userGroups);    }    private void savePersonToDatabase(String cognitoSub, String email, List<String> userGroups) {        Person person = new Person(cognitoSub, cognitoSub, email, email, userGroups, true);        this.personService.savePerson(person);    }    public List<String> getUserRolesFromToken(String token) throws Exception {        return this.jwtService.extractCognitoGroups(token);    }    public boolean isUserActive(String token) throws Exception {        String cognitoSub = this.jwtService.extractCognitoSub(token);        Person person = this.personService.findByCognitoId(cognitoSub);        return person != null && person.isActive();    }}