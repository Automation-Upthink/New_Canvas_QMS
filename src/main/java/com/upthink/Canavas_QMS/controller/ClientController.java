package com.upthink.Canavas_QMS.controller;import com.upthink.Canavas_QMS.dto.request.*;import com.upthink.Canavas_QMS.dto.response.BaseResponse;import com.upthink.Canavas_QMS.dto.response.FetchDataForClientResponse;import com.upthink.Canavas_QMS.dto.response.LambdaDataResponse;import com.upthink.Canavas_QMS.model.Client;import com.upthink.Canavas_QMS.service.AssignmentService;import com.upthink.Canavas_QMS.service.ClientService;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import java.sql.Timestamp;import java.util.List;import java.util.Optional;@RestController@RequestMapping("/api/clients")public class ClientController {    private final ClientService clientService;    private AssignmentService assignmentService;    public ClientController(ClientService clientService, AssignmentService assignmentService) {        this.clientService = clientService;        this.assignmentService = assignmentService;    }    @GetMapping    @PreAuthorize("hasAnyRole('QM_ADMIN', 'SME', 'USER')")    public ResponseEntity<List<Client>> getAllClients(@RequestBody GetAllClientsRequest request) {        List<Client> clients = clientService.getAllClients();        return ResponseEntity.ok(clients);    }    @GetMapping("/{id}")    @PreAuthorize("hasAnyRole('QM_ADMIN', 'SME', 'USER')")    public ResponseEntity<Client> getClientById(@PathVariable int id, @RequestBody GetClientByIdRequest request) {        Optional<Client> client = clientService.getClientById(id);        return client.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());    }    @PostMapping    @PreAuthorize("hasRole('QM_ADMIN')")    public ResponseEntity<String> createClient(@RequestBody CreateClientRequest request) {        clientService.saveClient(request.getData());        return ResponseEntity.ok("Client created successfully");    }    @PutMapping("/{id}")    @PreAuthorize("hasRole('QM_ADMIN')")    public ResponseEntity<String> updateClient(@PathVariable int id, @RequestBody UpdateClientRequest request) {        Optional<Client> existingClient = clientService.getClientById(id);        if (existingClient.isPresent()) {            Client client = request.getData();            client.setId(id);            clientService.saveClient(client);            return ResponseEntity.ok("Client updated successfully");        } else {            return ResponseEntity.notFound().build();        }    }    @DeleteMapping("/{id}")    @PreAuthorize("hasRole('QM_ADMIN')")    public ResponseEntity<String> deleteClient(@PathVariable int id, @RequestBody DeleteClientRequest request) {        Optional<Client> existingClient = clientService.getClientById(id);        if (existingClient.isPresent()) {            Client client = existingClient.get();            client.setDeletedAt(new Timestamp(System.currentTimeMillis())); // Soft delete by updating deletedAt            clientService.saveClient(client);            return ResponseEntity.ok("Client soft deleted successfully");        } else {            return ResponseEntity.notFound().build();        }    }    @PostMapping("/fetchDataForClient")    public ResponseEntity getDataForClient(@RequestBody FetchDataForClientRequest request) {        Optional<Client> clientOpt = clientService.getClientById(request.getClientId());        if (clientOpt.isPresent()) {            Client client = (Client) clientOpt.get();            List<FetchDataForClientResponse> assignments = assignmentService.fetchDataForClientService(client.getId());            return ResponseEntity.ok(assignments);        } else {            ResponseEntity.notFound();        }    }}