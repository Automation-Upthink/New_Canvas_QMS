package com.upthink.Canavas_QMS.controller;import com.upthink.Canavas_QMS.model.Person;import com.upthink.Canavas_QMS.service.PersonService;//import com.upthink.Canavas_QMS.dto.request.CreatePersonRequest;//import com.upthink.Canavas_QMS.dto.request.UpdatePersonRequest;//import com.upthink.Canavas_QMS.dto.request.DeletePersonRequest;//import com.upthink.Canavas_QMS.dto.request.GetAllPersonsRequest;//import com.upthink.Canavas_QMS.dto.request.GetPersonByIdRequest;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import java.sql.Timestamp;import java.util.List;import java.util.Optional;@RestController@RequestMapping("/api/persons")public class PersonController {    private final PersonService personService;    public PersonController(PersonService personService) {        this.personService = personService;    }//    @GetMapping//    @PreAuthorize("hasAnyRole('QM_ADMIN', 'SME', 'USER')")//    public ResponseEntity<List<Person>> getAllPersons(@RequestParam String tokenValidationId) {//        List<Person> persons = personService.getAllPersons();//        return ResponseEntity.ok(persons);//    }////    @GetMapping("/{id}")//    @PreAuthorize("hasAnyRole('QM_ADMIN', 'SME', 'USER')")//    public ResponseEntity<Person> getPersonById(@PathVariable String id, @RequestParam String tokenValidationId) {//        Optional<Person> person = personService.getPersonById(id);//        return person.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());//    }//    @PostMapping//    @PreAuthorize("hasRole('QM_ADMIN')")//    public ResponseEntity<String> createPerson(@RequestBody CreatePersonRequest request) {//        personService.savePerson(request.getData());//        return ResponseEntity.ok("Person created successfully");//    }////    @PutMapping("/{id}")//    @PreAuthorize("hasRole('QM_ADMIN')")//    public ResponseEntity<String> updatePerson(@PathVariable String id, @RequestBody UpdatePersonRequest request) {//        Optional<Person> existingPerson = personService.getPersonById(id);//        if (existingPerson.isPresent()) {//            Person person = request.getData();//            person.setId(id);//            personService.savePerson(person);//            return ResponseEntity.ok("Person updated successfully");//        } else {//            return ResponseEntity.notFound().build();//        }//    }////    @DeleteMapping("/{id}")//    @PreAuthorize("hasRole('QM_ADMIN')")//    public ResponseEntity<String> deletePerson(@PathVariable String id, @RequestBody DeletePersonRequest request) {//        Optional<Person> existingPerson = personService.getPersonById(id);//        if (existingPerson.isPresent()) {//            Person person = existingPerson.get();//            person.setActive(false); // Soft delete by setting active status to false//            personService.savePerson(person);//            return ResponseEntity.ok("Person soft deleted successfully");//        } else {//            return ResponseEntity.notFound().build();//        }//    }}