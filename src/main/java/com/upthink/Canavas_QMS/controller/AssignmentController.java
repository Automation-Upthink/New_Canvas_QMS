package com.upthink.Canavas_QMS.controller;import com.upthink.Canavas_QMS.model.Assignment;import com.upthink.Canavas_QMS.service.AssignmentService;import com.upthink.Canavas_QMS.dto.request.CreateAssignmentRequest;import com.upthink.Canavas_QMS.dto.request.UpdateAssignmentRequest;import com.upthink.Canavas_QMS.dto.request.DeleteAssignmentRequest;import com.upthink.Canavas_QMS.dto.request.GetAllAssignmentsRequest;import com.upthink.Canavas_QMS.dto.request.GetAssignmentByIdRequest;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import java.sql.Timestamp;import java.util.List;import java.util.Optional;@RestController@RequestMapping("/api/assignments")public class AssignmentController {    private final AssignmentService assignmentService;    public AssignmentController(AssignmentService assignmentService) {        this.assignmentService = assignmentService;    }    @GetMapping    @PreAuthorize("hasAnyRole('QM_ADMIN', 'SME', 'USER')")    public ResponseEntity<List<Assignment>> getAllAssignments(@RequestBody GetAllAssignmentsRequest request) {        List<Assignment> assignments = assignmentService.getAllAssignments();        return ResponseEntity.ok(assignments);    }    @GetMapping("/{id}")    @PreAuthorize("hasAnyRole('QM_ADMIN', 'SME', 'USER')")    public ResponseEntity<Assignment> getAssignmentById(@PathVariable int id, @RequestBody GetAssignmentByIdRequest request) {        Optional<Assignment> assignment = assignmentService.getAssignmentById(id);        return assignment.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());    }    @PostMapping    @PreAuthorize("hasRole('QM_ADMIN')")    public ResponseEntity<String> createAssignment(@RequestBody CreateAssignmentRequest request) {        assignmentService.saveAssignment(request.getData());        return ResponseEntity.ok("Assignment created successfully");    }    @PutMapping("/{id}")    @PreAuthorize("hasRole('QM_ADMIN')")    public ResponseEntity<String> updateAssignment(@PathVariable int id, @RequestBody UpdateAssignmentRequest request) {        Optional<Assignment> existingAssignment = assignmentService.getAssignmentById(id);        if (existingAssignment.isPresent()) {            Assignment assignment = request.getData();            assignment.setId(id);            assignmentService.saveAssignment(assignment);            return ResponseEntity.ok("Assignment updated successfully");        } else {            return ResponseEntity.notFound().build();        }    }    @DeleteMapping("/{id}")    @PreAuthorize("hasRole('QM_ADMIN')")    public ResponseEntity<String> deleteAssignment(@PathVariable int id, @RequestBody DeleteAssignmentRequest request) {        Optional<Assignment> existingAssignment = assignmentService.getAssignmentById(id);        if (existingAssignment.isPresent()) {            Assignment assignment = existingAssignment.get();            assignment.setDeletedAt(new Timestamp(System.currentTimeMillis())); // Soft delete by updating deletedAt            assignmentService.saveAssignment(assignment);            return ResponseEntity.ok("Assignment soft deleted successfully");        } else {            return ResponseEntity.notFound().build();        }    }}