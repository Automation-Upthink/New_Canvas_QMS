package com.upthink.Canavas_QMS.controller;import com.upthink.Canavas_QMS.dto.request.*;import com.upthink.Canavas_QMS.model.Essay;import com.upthink.Canavas_QMS.service.EssayService;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import java.sql.Timestamp;import java.util.List;import java.util.Optional;@RestController@RequestMapping("/api/essays")public class EssayController {    private final EssayService essayService;    public EssayController(EssayService essayService) {        this.essayService = essayService;    }    @GetMapping    @PreAuthorize("hasAnyRole('QM_ADMIN', 'SME', 'USER')")    public ResponseEntity<List<Essay>> getAllEssays(@RequestBody GetAllEssaysRequest request) {        List<Essay> essays = essayService.getAllEssays();        return ResponseEntity.ok(essays);    }    @GetMapping("/{id}")    @PreAuthorize("hasAnyRole('QM_ADMIN', 'SME', 'USER')")    public ResponseEntity<Essay> getEssayById(@PathVariable int id, @RequestBody GetEssayByIdRequest request) {        Optional<Essay> essay = essayService.getEssayById(id);        return essay.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());    }    @PostMapping("/addEssaysFromCanvas")    @PreAuthorize("hasRole('QM_ADMIN')")    public ResponseEntity<String> addEssayFromCanvas(@RequestBody CanvasEssaysDTO request) {        try {            essayService.addEssayFromCanvasService(request.getCanvasEssaysDTOList());            return ResponseEntity.ok("Essays added successfully.");        } catch(Exception e) {            // Log the exception as needed            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)                    .body("Failed to add essays: " + e.getMessage());        }    }//    @PutMapping("/{id}")//    @PreAuthorize("hasRole('QM_ADMIN')")//    public ResponseEntity<String> updateEssay(@PathVariable int id, @RequestBody UpdateEssayRequest request) {//        Optional<Essay> existingEssay = essayService.getEssayById(id);//        if (existingEssay.isPresent()) {//            Essay essay = request.getData();//            essay.setId(id);//            essayService.saveEssay(essay);//            return ResponseEntity.ok("Essay updated successfully");//        } else {//            return ResponseEntity.notFound().build();//        }//    }////    @DeleteMapping("/{id}")//    @PreAuthorize("hasRole('QM_ADMIN')")//    public ResponseEntity<String> deleteEssay(@PathVariable int id, @RequestBody DeleteEssayRequest request) {//        Optional<Essay> existingEssay = essayService.getEssayById(id);//        if (existingEssay.isPresent()) {//            Essay essay = existingEssay.get();//            essay.setDeletedAt(new Timestamp(System.currentTimeMillis())); // Soft delete by updating deletedAt//            essayService.saveEssay(essay);//            return ResponseEntity.ok("Essay soft deleted successfully");//        } else {//            return ResponseEntity.notFound().build();//        }//    }}