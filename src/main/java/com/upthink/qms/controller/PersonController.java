package com.upthink.qms.controller;import com.upthink.qms.dto.request.AuthenticatedRequest;import com.upthink.qms.dto.response.BaseResponse;import com.upthink.qms.dto.response.PersonResponse;import com.upthink.qms.model.Person;import com.upthink.qms.service.PersonService;//import com.upthink.Canavas_QMS.dto.request.CreatePersonRequest;//import com.upthink.Canavas_QMS.dto.request.UpdatePersonRequest;//import com.upthink.Canavas_QMS.dto.request.DeletePersonRequest;//import com.upthink.Canavas_QMS.dto.request.GetAllPersonsRequest;//import com.upthink.Canavas_QMS.dto.request.GetPersonByIdRequest;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;@RestController@RequestMapping("/api/persons")public class PersonController {    private final PersonService personService;    public PersonController(PersonService personService) {        this.personService = personService;    }    @PostMapping("/checkActiveStatus")    public BaseResponse checkUserStatus(AuthenticatedRequest request){        try{            personService.findByCognitoId(request.getId().getSub());            return new BaseResponse(true, "Welcome valuable user");        } catch (Exception e) {            return new BaseResponse(false, "You have been made inactive by the manager");        }    }    @PostMapping("/listUsers")    @PreAuthorize("hasRole('MANAGER')")    public PersonResponse listCognitoUsers(AuthenticatedRequest request) {        List<Person> peopleInDatabase = personService.getAllUsersForManager(); // Assuming findAllByCognitoSubIn is a method in PersonService        // Map the peopleInDatabase to PersonDTOs        List<PersonResponse.PersonDTO> personDTOs = peopleInDatabase.stream()                .map(person -> new PersonResponse.PersonDTO(                        person.getName(),                        person.getEmail(),                        person.getGroups(),                        person.isActive()))                .collect(Collectors.toList());        // Return the response        return new PersonResponse(personDTOs, true, null);    }    @PostMapping("/addPersonToDatabase")    public BaseResponse addUserToPersonDb(AuthenticatedRequest request) {        // Extracting the necessary data from the request, assuming it contains the user details        String email = request.getId().getEmail();        String cognitoId = request.getId().getSub();        String name = request.getId().getName();        List<String> groups = request.getId().getGroups(); // Groups user is associated with        // Check if the user already exists by email or cognitoId        Optional<Person> existingPersonByCognitoId = Optional.ofNullable(personService.findByCognitoId(cognitoId));        if (existingPersonByCognitoId.isPresent()) {            // Return response if the person already exists            return new BaseResponse(false, "Person already exists");        }        // Create a new Person object and set its properties        Person newPerson = new Person(                cognitoId,  // Generate a unique ID                cognitoId,                name,                email,                groups,                true // Assuming the person is active by default        );        // Save the new person to the database        personService.savePerson(newPerson);        // Return a success response        return new BaseResponse(true,"Person added successfully");    }//    @GetMapping//    @PreAuthorize("hasAnyRole('QM_ADMIN', 'SME', 'USER')")//    public ResponseEntity<List<Person>> getAllPersons(@RequestParam String tokenValidationId) {//        List<Person> persons = personService.getAllPersons();//        return ResponseEntity.ok(persons);//    }////    @GetMapping("/{id}")//    @PreAuthorize("hasAnyRole('QM_ADMIN', 'SME', 'USER')")//    public ResponseEntity<Person> getPersonById(@PathVariable String id, @RequestParam String tokenValidationId) {//        Optional<Person> person = personService.getPersonById(id);//        return person.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());//    }//    @PostMapping//    @PreAuthorize("hasRole('QM_ADMIN')")//    public ResponseEntity<String> createPerson(@RequestBody CreatePersonRequest request) {//        personService.savePerson(request.getData());//        return ResponseEntity.ok("Person created successfully");//    }////    @PutMapping("/{id}")//    @PreAuthorize("hasRole('QM_ADMIN')")//    public ResponseEntity<String> updatePerson(@PathVariable String id, @RequestBody UpdatePersonRequest request) {//        Optional<Person> existingPerson = personService.getPersonById(id);//        if (existingPerson.isPresent()) {//            Person person = request.getData();//            person.setId(id);//            personService.savePerson(person);//            return ResponseEntity.ok("Person updated successfully");//        } else {//            return ResponseEntity.notFound().build();//        }//    }////    @DeleteMapping("/{id}")//    @PreAuthorize("hasRole('QM_ADMIN')")//    public ResponseEntity<String> deletePerson(@PathVariable String id, @RequestBody DeletePersonRequest request) {//        Optional<Person> existingPerson = personService.getPersonById(id);//        if (existingPerson.isPresent()) {//            Person person = existingPerson.get();//            person.setActive(false); // Soft delete by setting active status to false//            personService.savePerson(person);//            return ResponseEntity.ok("Person soft deleted successfully");//        } else {//            return ResponseEntity.notFound().build();//        }//    }}