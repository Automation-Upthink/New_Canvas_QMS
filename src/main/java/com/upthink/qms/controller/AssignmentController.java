package com.upthink.qms.controller;import com.upthink.qms.dto.response.AssignmentResponse;import com.upthink.qms.dto.response.BaseResponse;import com.upthink.qms.model.Assignment;import com.upthink.qms.model.Course;import com.upthink.qms.service.AssignmentService;import com.upthink.qms.dto.request.GetAllAssignmentsRequest;import com.upthink.qms.dto.request.GetAssignmentByIdRequest;import com.upthink.qms.service.CourseService;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.Optional;@RestController@RequestMapping("/api/assignments")public class AssignmentController {    private final AssignmentService assignmentService;    private final CourseService courseService;    public AssignmentController(AssignmentService assignmentService, CourseService courseService) {        this.courseService = courseService;        this.assignmentService = assignmentService;    }//    @GetMapping//    @PreAuthorize("hasAnyRole('QM_ADMIN', 'SME', 'USER')")//    public ResponseEntity<List<Assignment>> getAllAssignments(@RequestBody GetAllAssignmentsRequest request) {//        List<Assignment> assignments = assignmentService.getAllAssignments();//        return ResponseEntity.ok(assignments);//    }    @GetMapping("/{id}")    @PreAuthorize("hasAnyRole('QM_ADMIN', 'SME', 'USER')")    public ResponseEntity<Assignment> getAssignmentById(@PathVariable int id, @RequestBody GetAssignmentByIdRequest request) {        Optional<Assignment> assignment = assignmentService.getAssignmentById(id);        return assignment.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());    }    @PostMapping("/listAssignmentsForCourse")    @PreAuthorize("hasRole('QM_ADMIN')")    public ResponseEntity<AssignmentResponse> getAssignmentsByCourse(@RequestBody GetAllAssignmentsRequest request) {        Optional<Course> courseOpt = courseService.getCourseById(request.getCourseId());        System.out.println("Course opt " + courseOpt);        if (courseOpt.isPresent()) {            System.out.println(courseOpt.get().getId());            AssignmentResponse assignmentResponse = assignmentService.getAssignmentsForCourse(courseOpt.get().getId());            return ResponseEntity.ok(assignmentResponse);        } else {            return ResponseEntity.notFound().build();        }    }    @PostMapping("/viewAssignmentsForCourse")    @PreAuthorize("hasRole('QM_ADMIN')")    public List<Assignment> viewAssignmentsForCourse(@RequestBody GetAllAssignmentsRequest request) {        Optional<Course> courseOpt = courseService.getCourseById(request.getCourseId());        System.out.println("Course opt " + courseOpt);        if (courseOpt.isPresent()) {            System.out.println(courseOpt.get().getId());            List<Assignment> assignments = assignmentService.viewAssignmentsForCourse(courseOpt.get().getId());            return assignments;        } else {            return null;        }    }//    @PostMapping//    @PreAuthorize("hasRole('QM_ADMIN')")//    public ResponseEntity<String> createAssignment(@RequestBody CreateAssignmentRequest request) {//        assignmentService.saveAssignment(request.getData());//        return ResponseEntity.ok("Assignment created successfully");//    }////    @PutMapping("/{id}")//    @PreAuthorize("hasRole('QM_ADMIN')")//    public ResponseEntity<String> updateAssignment(@PathVariable int id, @RequestBody UpdateAssignmentRequest request) {//        Optional<Assignment> existingAssignment = assignmentService.getAssignmentById(id);//        if (existingAssignment.isPresent()) {//            Assignment assignment = request.getData();//            assignment.setId(id);//            assignmentService.saveAssignment(assignment);//            return ResponseEntity.ok("Assignment updated successfully");//        } else {//            return ResponseEntity.notFound().build();//        }//    }////    @DeleteMapping("/{id}")//    @PreAuthorize("hasRole('QM_ADMIN')")//    public ResponseEntity<String> deleteAssignment(@PathVariable int id, @RequestBody DeleteAssignmentRequest request) {//        Optional<Assignment> existingAssignment = assignmentService.getAssignmentById(id);//        if (existingAssignment.isPresent()) {//            Assignment assignment = existingAssignment.get();//            assignment.setDeletedAt(new Timestamp(System.currentTimeMillis())); // Soft delete by updating deletedAt//            assignmentService.saveAssignment(assignment);//            return ResponseEntity.ok("Assignment soft deleted successfully");//        } else {//            return ResponseEntity.notFound().build();//        }//    }}