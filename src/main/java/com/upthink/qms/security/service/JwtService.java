package com.upthink.qms.security.service;import com.nimbusds.jose.crypto.RSASSAVerifier;import com.nimbusds.jose.jwk.JWK;import com.nimbusds.jose.jwk.JWKSet;import com.nimbusds.jose.jwk.RSAKey;import com.nimbusds.jwt.SignedJWT;import jakarta.annotation.PostConstruct;import java.io.InputStream;import java.net.URI;import java.text.ParseException;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;@Servicepublic class JwtService {    @Value("${spring.security.oauth2.client.provider.cognito.jwk-set-uri}")    private String JWKS_URL;    private Map<String, RSAKey> registrationKeysMap = new ConcurrentHashMap();    public JwtService() {    }    @PostConstruct    public void init() {        if (this.JWKS_URL != null && !this.JWKS_URL.isEmpty()) {            this.loadKeysFromCognito();        } else {            throw new RuntimeException("JWKS_URL is not set or is empty");        }    }    private void loadKeysFromCognito() {        try {            InputStream inputStream = URI.create(this.JWKS_URL).toURL().openStream();            JWKSet jwkSet = JWKSet.load(inputStream);            Iterator var3 = jwkSet.getKeys().iterator();            while(var3.hasNext()) {                JWK jwk = (JWK)var3.next();                if (jwk instanceof RSAKey rsaKey) {                    this.registrationKeysMap.put(rsaKey.getKeyID(), rsaKey);                }            }        } catch (Exception var6) {            Exception e = var6;            throw new RuntimeException("Failed to load JWKs from Cognito URI", e);        }    }    public synchronized RSAKey getJsonWebKey(String kid) {        if (!this.registrationKeysMap.containsKey(kid)) {            throw new RuntimeException("Key ID not found: " + kid);        } else {            return (RSAKey)this.registrationKeysMap.get(kid);        }    }    public List<Map<String, Object>> getKeyList() {        List<Map<String, Object>> keyList = new ArrayList();        Iterator var2 = this.registrationKeysMap.values().iterator();        while(var2.hasNext()) {            RSAKey rsaKey = (RSAKey)var2.next();            try {                RSAKey publicKey = rsaKey.toPublicJWK();                Map<String, Object> keyData = new HashMap();                keyData.put("kty", publicKey.getKeyType().getValue());                keyData.put("alg", "RS256");                keyData.put("kid", publicKey.getKeyID());                keyData.put("e", publicKey.getPublicExponent().toString());                keyData.put("n", publicKey.getModulus().toString());                keyData.put("use", "sig");                keyList.add(keyData);            } catch (Exception var6) {                Exception e = var6;                throw new RuntimeException("Failed to convert RSA key to public key", e);            }        }        return keyList;    }    public JWKSet getJwkSet() {        return new JWKSet(new ArrayList(this.registrationKeysMap.values()));    }    public String extractCognitoSub(String token) {        try {            SignedJWT signedJWT = SignedJWT.parse(token);            String cognitoSub = signedJWT.getJWTClaimsSet().getStringClaim("sub");            return cognitoSub;        } catch (ParseException var4) {            ParseException e = var4;            throw new RuntimeException("Failed to parse JWT and extract 'sub' claim", e);        }    }    public List<String> extractCognitoGroups(String token) {        try {            SignedJWT signedJWT = SignedJWT.parse(token);            return signedJWT.getJWTClaimsSet().getStringListClaim("cognito:groups");        } catch (ParseException var3) {            ParseException e = var3;            throw new RuntimeException("Failed to parse JWT and extract 'groups' claim", e);        }    }    public boolean isTokenValid(String token) {        try {            SignedJWT signedJWT = SignedJWT.parse(token);            String kid = signedJWT.getHeader().getKeyID();            System.out.println("Jwt service kid " + kid);            RSAKey rsaKey = (RSAKey)this.registrationKeysMap.get(kid);            if (rsaKey == null) {                throw new RuntimeException("Key ID not found: " + kid);            } else {                RSASSAVerifier verifier = new RSASSAVerifier(rsaKey.toRSAPublicKey());                boolean isSignatureValid = signedJWT.verify(verifier);                Date expirationTime = signedJWT.getJWTClaimsSet().getExpirationTime();                boolean isExpired = expirationTime == null || (new Date()).after(expirationTime);                return isSignatureValid && !isExpired;            }        } catch (Exception var9) {            Exception e = var9;            e.printStackTrace();            return false;        }    }    public Date extractExpiration(String token) {        try {            SignedJWT signedJWT = SignedJWT.parse(token);            return signedJWT.getJWTClaimsSet().getExpirationTime();        } catch (ParseException var3) {            ParseException e = var3;            throw new RuntimeException("Failed to parse JWT and extract expiration", e);        }    }    public String extractCognitoEmail(String token) {        try {            SignedJWT signedJWT = SignedJWT.parse(token);            String email = signedJWT.getJWTClaimsSet().getStringClaim("email");            return email;        } catch (ParseException var4) {            ParseException e = var4;            throw new RuntimeException("Failed to parse JWT and extract 'email' claim", e);        }    }}