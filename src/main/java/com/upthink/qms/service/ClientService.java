package com.upthink.qms.service;import com.upthink.qms.model.Assignment;import com.upthink.qms.model.Client;import com.upthink.qms.model.Course;import com.upthink.qms.repository.AssignmentRepository;import com.upthink.qms.repository.ClientRepository;import com.upthink.qms.repository.CourseRepository;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;@Servicepublic class ClientService {    private final ClientRepository clientRepository;    private final CourseRepository courseRepository;    private final AssignmentRepository assignmentRepository;    public ClientService(ClientRepository clientRepository, CourseRepository courseRepository, AssignmentRepository assignmentRepository) {        this.clientRepository = clientRepository;        this.courseRepository = courseRepository;        this.assignmentRepository = assignmentRepository;    }    public List<Client> getAllClients() {        return clientRepository.findAllClients();    }    public Optional<Client> getClientById(int id) {        return clientRepository.findClientById(id);    }    public int addNewClient(String name) {        if(clientRepository.findClientByName(name).isPresent()) {            throw new IllegalArgumentException("Client by the name " + name + " is already present");        }        return clientRepository.addNewClient(name);    }    public void deleteClientById(int id) {        clientRepository.deleteClientById(id);        List<Course> courseList = courseRepository.getActiveCoursesForClient(id);        for(Course course : courseList) {            courseRepository.softDeleteCourseById(course.getId());            List<Assignment> assignmentList = assignmentRepository.findAllAssignmentsForCourse(course.getId());            for (Assignment assignment : assignmentList) {                assignmentRepository.softDeleteAssignmentById(assignment.getId());            }        }    }}