package com.upthink.qms.service;import com.upthink.qms.dto.response.FetchDataForClientResponse;import com.upthink.qms.dto.response.AssignmentResponse;import com.upthink.qms.model.Assignment;import com.upthink.qms.repository.AssignmentRepository;import org.springframework.stereotype.Service;import java.sql.Timestamp;import java.time.Instant;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;@Servicepublic class AssignmentService {    private final AssignmentRepository assignmentRepository;    public AssignmentService(AssignmentRepository assignmentRepository) {        this.assignmentRepository = assignmentRepository;    }    public List<Assignment> getAllAssignments() {        return assignmentRepository.findAllAssignments();    }    public Optional<Assignment> getAssignmentById(int id) {        return assignmentRepository.findAssignmentById(id);    }    public AssignmentResponse getAssignmentsForCourse(int id) {        List<Assignment> assignmentsForACourse = assignmentRepository.findAllAssignmentsForCourse(id);        List<AssignmentResponse.AssignmentDTO> assignmentDTOList = assignmentsForACourse.stream()                .map(row -> new AssignmentResponse.AssignmentDTO(                        row.getId(),                        row.getAssignmentId()                )).collect(Collectors.toList());        return new AssignmentResponse(assignmentDTOList);    }    public List<Assignment> viewAssignmentsForCourse(int id) {        List<Assignment> assignmentsForACourse = assignmentRepository.findAllAssignmentsForCourse(id);        return assignmentsForACourse;    }    public FetchDataForClientResponse fetchDataForClientService(Integer clientId) {        List<Object[]> results = assignmentRepository.findAssignmentsForClient(clientId);        List<FetchDataForClientResponse.DataForClientDTO> dataForClientDTOList = results.stream()                .map(record -> {                    Instant dueInstant = record[4] != null ? (Instant) record[4] : null;                    Instant lockInstant = record[5] != null ? (Instant) record[5] : null;                    Timestamp dueDate = dueInstant != null ? Timestamp.from(dueInstant) : null;                    Timestamp lockDate = lockInstant != null ? Timestamp.from(lockInstant) : null;                    return new FetchDataForClientResponse.DataForClientDTO(                            (Integer) record[0],                            (String) record[1],                            (Integer) record[2],                            (String) record[3],                            dueDate,                            lockDate                    );                }).collect(Collectors.toList());        return new FetchDataForClientResponse(dataForClientDTOList);    }}