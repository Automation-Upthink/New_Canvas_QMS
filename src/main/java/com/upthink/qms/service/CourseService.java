package com.upthink.qms.service;import com.upthink.qms.dto.response.CourseResponse;import com.upthink.qms.model.Course;import com.upthink.qms.repository.CourseRepository;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;@Servicepublic class CourseService {    private final CourseRepository courseRepository;    public CourseService(CourseRepository courseRepository) {        this.courseRepository = courseRepository;    }    public List<Course> getAllCourses() {        return courseRepository.findAllCourses();    }    public Optional<Course> getCourseById(Integer id) {        return courseRepository.findCourseById(id);    }    public void saveCourseToDatabase(String courseId, int clientId) {        courseRepository.saveCourseToDatabase(courseId, clientId);    }    public CourseResponse getCoursesForAClient(int id) {        List<Course> activeCoursesForClient = courseRepository.getActiveCoursesForClient(id);        List<CourseResponse.CourseDTO> courseDTOList = activeCoursesForClient.stream()                .map(row -> new CourseResponse.CourseDTO(                        row.getId(),                        row.getCourseId()                ))                .collect(Collectors.toList());        return new CourseResponse(courseDTOList);    }    public List<Course> getActiveCoursesForClient(int id) {        return courseRepository.getActiveCoursesForClient(id);    }//    @Transactional//    public void saveCourse(Course course) {//        courseRepository.insertCourse(//                course.getClientId(),//                course.getName(),//                course.getSla(),//                course.getCreatedAt(),//                course.getUpdatedAt(),//                course.getDeletedAt(),//                course.getCourseId()//        );//    }    @Transactional    public void softDeleteCourseById(int id) {        courseRepository.softDeleteCourseById(id);    }}