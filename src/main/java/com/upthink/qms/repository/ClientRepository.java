package com.upthink.qms.repository;import com.upthink.qms.model.Client;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.Modifying;import org.springframework.data.jpa.repository.Query;import org.springframework.data.repository.query.Param;import org.springframework.stereotype.Repository;import org.springframework.transaction.annotation.Transactional;import java.sql.Timestamp;import java.util.List;import java.util.Optional;@Repositorypublic interface ClientRepository extends JpaRepository<Client, Integer> {    // Custom SQL Queries (excluding soft-deleted records)    @Query(value = "SELECT * FROM client WHERE deleted_at IS NULL", nativeQuery = true)    List<Client> findAllClients();    @Query("SELECT c FROM Client c WHERE c.id = :id AND c.deletedAt IS NULL")    Optional<Client> findClientById(Integer id);    @Query(value = "SELECT * FROM client WHERE client.name = :name", nativeQuery = true)    Optional<Client> findClientByName(String name);    @Modifying    @Transactional    @Query(value = "UPDATE client SET deleted_at = NOW() WHERE id = :id", nativeQuery = true)    void deleteClientById(@Param("id") int id);    @Modifying    @Transactional    @Query(value = """            INSERT INTO client (name, created_at)            VALUES (:name, NOW())            """, nativeQuery = true)    int addNewClient(@Param("name") String name);}