package com.upthink.qms.repository;import com.upthink.qms.model.Essay;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.Modifying;import org.springframework.data.jpa.repository.Query;import org.springframework.data.repository.query.Param;import org.springframework.stereotype.Repository;import org.springframework.transaction.annotation.Transactional;import java.math.BigDecimal;import java.sql.Timestamp;import java.util.List;import java.util.Optional;@Repositorypublic interface EssayRepository extends JpaRepository<Essay, Integer> {    // Custom SQL Queries (excluding soft-deleted records)    @Query("SELECT e FROM Essay e WHERE e.deletedAt IS NULL")    List<Essay> findAllEssays();    @Query("SELECT e FROM Essay e WHERE e.id = :id AND e.deletedAt IS NULL")    Optional<Essay> findEssayById(Integer id);    @Modifying    @Transactional    @Query("UPDATE Essay e SET e.deletedAt = :deletedAt WHERE e.id = :id")    void softDeleteEssayById(Integer id, Timestamp deletedAt);    @Query(value="""        SELECT          """, nativeQuery=true)    List<Object[]> listEssaysByStatus(@Param("essayStatusList") List<String> essayStatusList);    @Modifying    @Transactional    @Query("""    UPDATE Essay e SET e.name = :name, e.submissionId = :submissionId, e.assignmentId = :assignmentId,     e.userId = :userId, e.ungradedFileLink = :ungradedFileLink, e.status = :status, e.gradeTime = :gradeTime,     e.gradedFileLink = :gradedFileLink, e.finalGrade = :finalGrade, e.gradeOutOf = :gradeOutOf, e.rubric = :rubric,     e.comments = :comments, e.toPush = :toPush, e.pushStatus = :pushStatus WHERE e.id = :id    """)    void updateEssay(@Param("id") int id, @Param("name") String name, @Param("submissionId")    String submissionId, @Param("assignmentId") String assignmentId, @Param("userId") String userId,                     @Param("ungradedFileLink") String ungradedFileLink, @Param("status") String status,                     @Param("gradeTime") Integer gradeTime, @Param("gradedFileLink") String gradedFileLink,                     @Param("finalGrade") BigDecimal finalGrade, @Param("gradeOutOf") Integer gradeOutOf, @Param("rubric")                     String rubric, @Param("comments") String comments, @Param("toPush") Boolean toPush, @Param("pushStatus") Boolean pushStatus);}